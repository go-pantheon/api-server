syntax = "proto3";

package player.admin.recharge.v1;

import "google/api/annotations.proto";

option go_package = "api/server/player/admin/recharge/v1;adminv1";

// Recharge admin service
// Open to the server cluster
// Provide HTTP and gRPC interfaces
service RechargeAdmin {
	// Query order list by page
	rpc GetOrderList (GetOrderListRequest) returns (GetOrderListResponse) {
		option (google.api.http) = {
			get: "/admin/orders/list"
		};
	};
	// Query order by id
	rpc GetOrderById (GetOrderByIdRequest) returns (GetOrderByIdResponse) {
		option (google.api.http) = {
			get: "/admin/orders/{store}/{trans_id}"
		};
	};

	// Update order confirmation status by id
	rpc UpdateOrderAckStateById (UpdateOrderAckStateByIdRequest) returns (UpdateOrderAckStateByIdResponse) {
		option (google.api.http) = {
			patch: "/admin/orders/{store}/{trans_id}/ack/update"
			body: "*"
		};
	};

}

message GetOrderListRequest {
	int64 page = 1;
	int64 page_size = 2;

	GetOrderListCond cond = 3;
}

message GetOrderListResponse {
	repeated OrderProto orders = 1;
	int64 total = 2;
}

message GetOrderListCond {
	string store = 1;
	string trans_id = 2;
	int64 uid = 3;
	int32 ack = 4;
}

message GetOrderByIdRequest {
	string store = 1;
	string trans_id = 2;
}

message GetOrderByIdResponse {
	int32 code = 1;
	string message = 2;

	OrderProto order = 3;
}


message UpdateOrderAckStateByIdRequest {
	string store = 1;
	string trans_id = 2;
	int32 ack = 3;
}

message UpdateOrderAckStateByIdResponse {
	int32 code = 1;
	string message = 2;
}


message OrderProto {
	string store = 1;
	string trans_id = 2;
	int32 ack = 3;
	int64 uid = 4;
	string product_id = 5;
	int64 purchased_at = 6;
	int64 ack_at = 7;
	string detail = 8;
}
