syntax = "proto3";

package room.intra.v1;

option go_package = "api/server/room/intra/v1;intrav1";

// Room tunnel stream service
// Open to the server cluster
// Provide gRPC interfaces
service TunnelService {
  rpc Tunnel(stream TunnelRequest) returns (stream TunnelResponse) {}
}

message TunnelRequest {
  bytes data = 1; // Serialized bytes of the cs/sc protocol in the message
  uint64 data_version = 2; // Data version number
  int64 obj = 3; // Module object ID, according to the business agreement to pass the corresponding object ID
  int32 mod = 4; // Module ID, globally unique
  int32 seq = 5; // Module message ID, unique within the module
  int32 index = 6; // Index of the message in the stream

  int32 conn_id = 7; // Connection ID, default 0 means only used in raw KCP Connection, otherwise it is the stream ID

  int32 frag_id = 8; // Fragment ID, default 0 means no fragment. If frag_id is not 0, the data is a fragment of the message with the same frag_id.
  int32 frag_count = 9; // Fragment Count, the number of fragments in the same frag_id
  int32 frag_index = 10; // Fragment Index, belongs to the same frag_id
}

message TunnelResponse {
  bytes data = 1; // Serialized bytes of the cs/sc protocol in the message
  uint64 data_version = 2; // Data version number
  int64 obj = 3; // Module object ID, according to the business agreement to pass the corresponding object ID
  int32 mod = 4; // Module ID, globally unique
  int32 seq = 5; // Module message ID, unique within the module
  int32 index = 6; // Index of the message in the stream, same as the request

  int32 conn_id = 7;  // Connection ID, default 0 means only used in raw KCP Connection, otherwise it is the stream ID

  int32 frag_id = 8; // Fragment ID, default 0 means no fragment. If frag_id is not 0, the data is a fragment of the message with the same frag_id.
  int32 frag_count = 9; // Fragment Count, the number of fragments in the same frag_id
  int32 frag_index = 10; // Fragment Index, belongs to the same frag_id
}
